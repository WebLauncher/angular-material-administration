import { OnDestroy, ElementRef } from '@angular/core';
import { MatFormFieldControl } from '@angular/material/form-field';
import { Subject } from 'rxjs';
import { FormBuilder, NgControl, FormControl } from '@angular/forms';
import { FocusMonitor } from '@angular/cdk/a11y';
import * as i0 from "@angular/core";
export declare class MatFileInputComponent implements OnDestroy, MatFormFieldControl<File[]> {
    ngControl: NgControl;
    private fm;
    private elRef;
    static nextId: number;
    id: string;
    get shouldLabelFloat(): boolean;
    get placeholder(): string;
    set placeholder(plh: string);
    private placeholderValue;
    get required(): boolean;
    set required(req: boolean);
    private requiredValue;
    get disabled(): boolean;
    set disabled(value: boolean);
    private disabledValue;
    buttonText: string;
    errorState: boolean;
    controlType: string;
    describedBy: string;
    multiple: boolean;
    onChange: (value: any) => void;
    form: FormControl;
    stateChanges: Subject<void>;
    focused: boolean;
    set value(value: File[]);
    get value(): File[];
    get empty(): boolean;
    file: any;
    private destroyed$;
    constructor(ngControl: NgControl, fb: FormBuilder, fm: FocusMonitor, elRef: ElementRef<HTMLElement>);
    ngOnDestroy(): void;
    onContainerClick(event: MouseEvent): void;
    setDescribedByIds(ids: string[]): void;
    writeValue(value: File[]): void;
    registerOnChange(fn: (value: any) => void): void;
    registerOnTouched(): void;
    openChooseFile(): void;
    onFilesAdded(): void;
    getName(): string;
    static ɵfac: i0.ɵɵFactoryDef<MatFileInputComponent, [{ optional: true; self: true; }, null, null, null]>;
    static ɵcmp: i0.ɵɵComponentDefWithMeta<MatFileInputComponent, "mat-file-input", never, { "placeholder": "placeholder"; "required": "required"; "disabled": "disabled"; "buttonText": "buttonText"; "multiple": "multiple"; }, {}, never, never>;
}
